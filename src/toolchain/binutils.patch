diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index 21fff8ffab..ed76f919b1 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -647,6 +647,7 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       case 'r':	USE_BITS (OP_MASK_RS3,          OP_SH_RS3);     break;
       case 'P':	USE_BITS (OP_MASK_PRED,		OP_SH_PRED); break;
       case 'Q':	USE_BITS (OP_MASK_SUCC,		OP_SH_SUCC); break;
+      case 'w':	USE_BITS (OP_MASK_BS  ,		OP_SH_BS  ); break; // Crypto ISE
       case 'o':
       case 'j': used_bits |= ENCODE_ITYPE_IMM (-1U); break;
       case 'a':	used_bits |= ENCODE_UJTYPE_IMM (-1U); break;
@@ -1846,6 +1847,15 @@ rvc_lui:
 		}
 	      break;
 
+        case 'w': /* BS */
+	        my_getExpression (imm_expr, s);
+	        check_absolute_expr (ip, imm_expr, FALSE);
+            if(imm_expr->X_add_number > 3){as_bad(_("Crypto ISE: 0 <= Byte Select <= 3"));}
+            INSERT_OPERAND(BS,*ip,imm_expr->X_add_number & 0x3);
+            imm_expr->X_op = O_absent;
+            s = expr_end;
+            continue;
+
 	    case 'd':		/* Destination register.  */
 	    case 's':		/* Source register.  */
 	    case 't':		/* Target register.  */
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index f09200c073..939a424852 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -1,6 +1,62 @@
 /* Automatically generated by parse-opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+
+#define MATCH_SAES_V1_ENCS 0x102b
+#define MASK_SAES_V1_ENCS 0xfff0707f
+#define MATCH_SAES_V1_ENCM 0x10102b
+#define MASK_SAES_V1_ENCM 0xfff0707f
+#define MATCH_SAES_V1_DECS 0x20102b
+#define MASK_SAES_V1_DECS 0xfff0707f
+#define MATCH_SAES_V1_DECM 0x30102b
+#define MASK_SAES_V1_DECM 0xfff0707f
+#define MATCH_SAES_V2_SUB_ENC 0x1600202b
+#define MASK_SAES_V2_SUB_ENC 0xfe00707f
+#define MATCH_SAES_V2_SUB_DEC 0x1200202b
+#define MASK_SAES_V2_SUB_DEC 0xfe00707f
+#define MATCH_SAES_V2_MIX_ENC 0xe00202b
+#define MASK_SAES_V2_MIX_ENC 0xfe00707f
+#define MATCH_SAES_V2_MIX_DEC 0xc00202b
+#define MASK_SAES_V2_MIX_DEC 0xfe00707f
+#define MATCH_SAES_V3_ENCS 0x800302b
+#define MASK_SAES_V3_ENCS 0x3e00707f
+#define MATCH_SAES_V3_ENCSM 0x600302b
+#define MASK_SAES_V3_ENCSM 0x3e00707f
+#define MATCH_SAES_V3_DECS 0x400302b
+#define MASK_SAES_V3_DECS 0x3e00707f
+#define MATCH_SAES_V3_DECSM 0x200302b
+#define MASK_SAES_V3_DECSM 0x3e00707f
+#define MATCH_SAES_V4_ENCSM_LO 0x1000402b
+#define MASK_SAES_V4_ENCSM_LO 0xfe00707f
+#define MATCH_SAES_V4_ENCSM_HI 0xe00402b
+#define MASK_SAES_V4_ENCSM_HI 0xfe00707f
+#define MATCH_SAES_V4_ENCS_LO 0xc00402b
+#define MASK_SAES_V4_ENCS_LO 0xfe00707f
+#define MATCH_SAES_V4_ENCS_HI 0xa00402b
+#define MASK_SAES_V4_ENCS_HI 0xfe00707f
+#define MATCH_SAES_V4_DECSM_LO 0x800402b
+#define MASK_SAES_V4_DECSM_LO 0xfe00707f
+#define MATCH_SAES_V4_DECSM_HI 0x600402b
+#define MASK_SAES_V4_DECSM_HI 0xfe00707f
+#define MATCH_SAES_V4_DECS_LO 0x400402b
+#define MASK_SAES_V4_DECS_LO 0xfe00707f
+#define MATCH_SAES_V4_DECS_HI 0x200402b
+#define MASK_SAES_V4_DECS_HI 0xfe00707f
+#define MATCH_SAES_V4_SUB 0x10402b
+#define MASK_SAES_V4_SUB 0xfff0707f
+#define MATCH_SAES_V4_IMIX 0x402b
+#define MASK_SAES_V4_IMIX 0xfff0707f
+#define MATCH_SAES_V5_ARK 0xa00502b
+#define MASK_SAES_V5_ARK 0x3e00707f
+#define MATCH_SAES_V5_ESRSUB 0xc00502b
+#define MASK_SAES_V5_ESRSUB 0x3e00707f
+#define MATCH_SAES_V5_EMIX 0xe00502b
+#define MASK_SAES_V5_EMIX 0x3e00707f
+#define MATCH_SAES_V5_DSRSUB 0x1000502b
+#define MASK_SAES_V5_DSRSUB 0x3e00707f
+#define MATCH_SAES_V5_DMIX 0x1200502b
+#define MASK_SAES_V5_DMIX 0x3e00707f
+
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index ac6e861dd9..d9b5d58f52 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -223,6 +223,9 @@ static const char * const riscv_pred_succ[16] =
 #define OP_MASK_RL		0x1
 #define OP_SH_RL		25
 
+#define OP_SH_BS        30
+#define OP_MASK_BS      3 
+
 #define OP_MASK_CUSTOM_IMM	0x7f
 #define OP_SH_CUSTOM_IMM	25
 #define OP_MASK_CSR		0xfff
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 47f9db0269..7871833df2 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -291,6 +291,10 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
 	  print (info->stream, "%s", riscv_gpr_names[rd]);
 	  break;
 
+    case 'w': /*BS*/
+	  print (info->stream, "0x%x", (int)EXTRACT_OPERAND (BS, l));
+	  break;
+
 	case 'z':
 	  print (info->stream, "%s", riscv_gpr_names[0]);
 	  break;
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index cc46d160cd..1fb217e458 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -198,6 +198,35 @@ match_srxi_as_c_srxi (const struct riscv_opcode *op, insn_t insn)
 const struct riscv_opcode riscv_opcodes[] =
 {
 /* name,     xlen, isa,   operands, match, mask, match_func, pinfo.  */
+
+{"saes.v1.encs"        , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V1_ENCS, MASK_SAES_V1_ENCS, match_opcode, 0},
+{"saes.v1.encm"        , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V1_ENCM, MASK_SAES_V1_ENCM, match_opcode, 0},
+{"saes.v1.decs"        , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V1_DECS, MASK_SAES_V1_DECS, match_opcode, 0},
+{"saes.v1.decm"        , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V1_DECM, MASK_SAES_V1_DECM, match_opcode, 0},
+{"saes.v2.sub.enc"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V2_SUB_ENC, MASK_SAES_V2_SUB_ENC, match_opcode, 0},
+{"saes.v2.sub.dec"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V2_SUB_DEC, MASK_SAES_V2_SUB_DEC, match_opcode, 0},
+{"saes.v2.mix.enc"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V2_MIX_ENC, MASK_SAES_V2_MIX_ENC, match_opcode, 0},
+{"saes.v2.mix.dec"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V2_MIX_DEC, MASK_SAES_V2_MIX_DEC, match_opcode, 0},
+{"saes.v3.encs"        , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V3_ENCS, MASK_SAES_V3_ENCS, match_opcode, 0},
+{"saes.v3.encsm"       , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V3_ENCSM, MASK_SAES_V3_ENCSM, match_opcode, 0},
+{"saes.v3.decs"        , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V3_DECS, MASK_SAES_V3_DECS, match_opcode, 0},
+{"saes.v3.decsm"       , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V3_DECSM, MASK_SAES_V3_DECSM, match_opcode, 0},
+{"saes.v4.encsm.lo"    , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_ENCSM_LO, MASK_SAES_V4_ENCSM_LO, match_opcode, 0},
+{"saes.v4.encsm.hi"    , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_ENCSM_HI, MASK_SAES_V4_ENCSM_HI, match_opcode, 0},
+{"saes.v4.encs.lo"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_ENCS_LO, MASK_SAES_V4_ENCS_LO, match_opcode, 0},
+{"saes.v4.encs.hi"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_ENCS_HI, MASK_SAES_V4_ENCS_HI, match_opcode, 0},
+{"saes.v4.decsm.lo"    , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_DECSM_LO, MASK_SAES_V4_DECSM_LO, match_opcode, 0},
+{"saes.v4.decsm.hi"    , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_DECSM_HI, MASK_SAES_V4_DECSM_HI, match_opcode, 0},
+{"saes.v4.decs.lo"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_DECS_LO, MASK_SAES_V4_DECS_LO, match_opcode, 0},
+{"saes.v4.decs.hi"     , 0, INSN_CLASS_I,    "d,s,t", MATCH_SAES_V4_DECS_HI, MASK_SAES_V4_DECS_HI, match_opcode, 0},
+{"saes.v4.sub"         , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V4_SUB, MASK_SAES_V4_SUB, match_opcode, 0},
+{"saes.v4.imix"        , 0, INSN_CLASS_I,      "d,s", MATCH_SAES_V4_IMIX, MASK_SAES_V4_IMIX, match_opcode, 0},
+{"saes.v5.ark"         , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V5_ARK, MASK_SAES_V5_ARK, match_opcode, 0},
+{"saes.v5.esrsub"      , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V5_ESRSUB, MASK_SAES_V5_ESRSUB, match_opcode, 0},
+{"saes.v5.emix"        , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V5_EMIX, MASK_SAES_V5_EMIX, match_opcode, 0},
+{"saes.v5.dsrsub"      , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V5_DSRSUB, MASK_SAES_V5_DSRSUB, match_opcode, 0},
+{"saes.v5.dmix"        , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES_V5_DMIX, MASK_SAES_V5_DMIX, match_opcode, 0},
+
 {"unimp",       0, INSN_CLASS_C,   "",  0, 0xffffU,  match_opcode, INSN_ALIAS },
 {"unimp",       0, INSN_CLASS_I,   "",  MATCH_CSRRW | (CSR_CYCLE << OP_SH_CSR), 0xffffffffU,  match_opcode, 0 }, /* csrw cycle, x0 */
 {"ebreak",      0, INSN_CLASS_C,   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, INSN_ALIAS },
